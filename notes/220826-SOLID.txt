220826-SOLID

//SRP 단일 책임 원칙
single responsibility principle
    > 한 클래스는 책임을 하나씩만 갖는다
    > 근데 '책임 하나'라는 단위가 모호하다.
    > 파급 효과가 적당하면 단일 책임 원칙을 잘 따른 것

//OCP 개방-폐쇄 원칙
open / closed principle
    > 가장 중요한 원칙 중 하나
    > 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 함.
    > 확장하려면 변경해야 하는 거 아닌가? 어떻게 가능하지?
    > 다형성을 활용해서 가능
    > 인터페이스를 구현한 새로운 클래스를 하나 만들어서 새로운 기능을 구현
    > 클라이언트 코드는 그대로 두고 설정 파일에서 새로운 클래스로 갈아끼우기만 하면 되도록

//LSP 리스코프 치환 원칙
Liskov substitution principle
    > 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.
    > 다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것.
    > 다형성을 지원하기 위한 원칙, 인터페이스를 구현한 구현체를 믿고 사용하려면 이 원칙이 필요하다.
    > 단순히 컴파일 성공을 넘어서는 이야기

//ISP 인터페이스 분리 원칙
Interface segregation principle
    > 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다
    > 자동차 인터페이스 : 운전 인터페이스 / 정비 인터페이스 / 
    > 사용자 인터페이스 : 운전자 클라이언트 / 정비사 클라이언트
    > 분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지 않음
    > 인터페이스가 명확해지고 대체 가능성이 높아진다. 쉬워진다.

//DIP 의존 관계 역전 원칙
Dependency inversion principle
    > 프로그래머는 '추상화에 의존해야지, 구체화에 의존하면 안 된다.' 의존성 주입은 이 원칙을 따르는 방법이다.
    > 쉽게 이야기해서, 구현체에 의존하지 말고 인터페이스에 의존하라는 말.
    > 앞에서 예시로 들었던, 역할에 의존하라는 말. 김태희 라는 배우 개체 한 명에 의존하는 게 아니라, 그러면 대체할 수가 없고, '줄리엣'이라는 역할에 의존하라고. 그럼 누가 연기하든 '줄리엣'을 대체할 가능성이 높아짐.
    

1티어가 OCP / DIP
개방-폐쇄 원칙 / 의존 관계 역전 원칙